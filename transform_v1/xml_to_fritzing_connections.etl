pre {
  "Starting Transformation".println();
  var constructedPartIds : Sequence;
}

rule xmlPart2ModelPart
  transform x : XML!t_part
  to p : FritzModel!Part {
  
  guard { // Prevent duplicates
    constructedPartIds.add(x.a_id);
    return constructedPartIds.select(id | id == x.a_id).size <= 1;
  } 
  
  p.partId = x.a_id;
  p.title = x.a_title;
}

rule net2Connection
  transform n : XML!t_net
  to c : FritzModel!Connection {
  
  guard : n.children.children.flatten.size > 1 // Ignore empty pins
  
  var connectors = n.children;
  
  var i = 0;
  while (i < (connectors.size - 1)) {
    var srcCon = connectors.get(i);
    var targetCon = connectors.get(i+1);
    var con; 
    if(i == 0) {
      con = c; // Populate already initialised Connection
    } else {
      con = new FritzModel!Connection; // Create new connection
    }
    
    var srcPart = getPartById(srcCon.children.first.a_id);
    var targetPart = getPartById(targetCon.children.first.a_id);
    
    // Populate Connection
    con.srcName = srcCon.a_name;
    con.srcPart = srcPart;
    con.targetName = targetCon.a_name;
    con.targetPart = targetPart;
    
    // Add connections to Part
    srcPart.connections.add(con);
    targetPart.connections.add(con);
    
    i = i+1;
  }
  

  
}

operation getPartById(id : String) : FritzModel!Part {
  var allParts = FritzModel!Part.all;
  return allParts.selectOne(p | p.partId == id);
}

post {
  // Put parts under a root Circuit element
  var circuit : new FritzModel!Circuit;  
  circuit.parts.addAll(FritzModel!Part.all);
  
  // Add connections to the root Circuit element
  circuit.connections.addAll(FritzModel!Connection.all);
  
  "Transformation Finished".println();
}
// TODO next: modify metamodel to include more detailed info on connections
// e.g. led anode vs cathode
// TODO: modify metamodel to have different classes for different parts e.g. board vs sensors
// TODO: extract remove duplicates to an operation