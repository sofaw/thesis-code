pre {
  "Starting Transformation".println();
  var constructedPartIds : Sequence;
}

rule xmlPart2ModelPart
  transform x : XML!t_part
  to p : FritzModel!Part {
  
  guard { // Prevent duplicates
    constructedPartIds.add(x.a_id);
    return constructedPartIds.select(id | id == x.a_id).size <= 1;
  } 
  
  p.partId = x.a_id;
  p.title = x.a_title;
}

rule net2Connection
  transform n : XML!t_net
  to c : FritzModel!Connection {
  
  guard : n.children.children.flatten.size > 1 // Ignore empty pins
  
  var parts = n.children.children.flatten;  
    for (p in parts) {
      if (not c.partIds.exists(i | i == p.id)) { // Ignore duplicates
        c.partIds.add(p.id);
      }
    }
  }

post {
  // Put parts under a root Circuit element
  var circuit : new FritzModel!Circuit;  
  circuit.parts.addAll(FritzModel!Part.all);
  
  // Add connections to the root Circuit element
  circuit.connections.addAll(FritzModel!Connection.all);
  
  "Transformation Finished".println();
}
// TODO next: modify metamodel to include more detailed info on connections
// e.g. led anode vs cathode
// TODO: modify metamodel to have different classes for different parts e.g. board vs sensors
// TODO: extract remove duplicates to an operation