var files = ITranslationUnit.all();

var mainFile = files.selectOne(f | f.getElementName == "case_study_parallax.c");

var ast = mainFile.getAST();

var visitor = new Native("org.sew569.visitor.ASTVisitorSew569");
ast.accept(visitor);

var simpleDecls = visitor.getSimpleDeclarations();
var functionCalls = visitor.getFunctionCalls(); // TODO: delete this from ASTVisitor?

var libPath = "/Users/sophie/SimpleIDE/Learn/Simple Libraries/";

// *** make assumption that main has setup and loop structure ***
var setupCodeSeq = getSetupCode(ast);
var loopCodeSeq = getLoopCode(ast);

/*"whole ast".println();
ast.println();
transformCode(ast).println();*/
"setup code".println();
transformCode(setupCodeSeq).println();
"".println();
"loop code".println();
transformCode(loopCodeSeq).println();
"myPrintf".println();
transformCode(ast.getChildren().select(c | c.isInstanceOf("CASTFunctionDefinition")).selectOne(c | c.getDeclarator().getName().toString() == "myPrintf")).println();


operation generateArduinoCode() : String {
	// TODO
	return "TODO";
}


// TODO: handle missing semicolons
// TODO: sort out indentation -> could run a formatter on the code?
// TODO: add includes
// TODO: handle order - e.g. '{' has been swapped with low(26) etc.
operation transformCode(ast : Any) : String {
	if(ast.isKindOf(Sequence)) {
		var result = "";
		for(c in ast) {
			var transformedCode = transformCode(c);
			result = result.concat(transformedCode);
			result = result.concat("\n");
		}
		return result;
	}
	
	if(ast.isInstanceOf("CASTFunctionCallExpression")) {
		var funcComponents = ast.getChildren();
		var funcName = funcComponents.selectOne(c | c.isInstanceOf("CASTIdExpression")).getChildren().first().toString();
		if(funcName.isPlatformDependentFunc(visitor.getSimpleDeclarations(), libPath)) {
			return "// TODO: replace usage of " + ast.getRawSignature() + " with Arduino lib function";
		}
	}
	
	if(ast.isInstanceOf("CASTBinaryExpression")) {
		var op1 = transformCode(ast.getOperand1());
		var op2 = transformCode(ast.getOperand2());
		
		if(op1.startsWith("// TODO") or op2.startsWith("// TODO")) {
			var platformDepFunction = "";
			if(op1.startsWith("// TODO")) {
				platformDepFunction = ast.getOperand1().getRawSignature();
			} else {
				platformDepFunction = ast.getOperand2().getRawSignature();
			}
			return "// TODO replace usage of " + platformDepFunction + " in " + ast.getRawSignature() + " with Arduino lib function";
		}
	}
	
	if(ast.isInstanceOf("CASTDeclarationStatement")) {
		var simpleDecl = ast.getChildren().selectOne(c | c.isInstanceOf("CASTSimpleDeclaration"));
		if(simpleDecl <> null) {
			var declarator = simpleDecl.getChildren().selectOne(c | c.isInstanceOf("CASTDeclarator"));
			if(declarator <> null) {
				var equalsInit = declarator.getChildren().selectOne(c | c.isInstanceOf("CASTEqualsInitializer"));
				if(equalsInit <> null) {
					var transformedCode = transformCode(equalsInit.getChildren());
					// TODO: extract "//TODO" string as const
					if(transformedCode.startsWith("// TODO")) {
						var declSpecifier = simpleDecl.getChildren().select(c | c.isInstanceOf("CASTSimpleDeclSpecifier"));
						var varName = declarator.getChildren().selectOne(c | c.isInstanceOf("CASTName")).getRawSignature();
						var result = "";
						for(ds in declSpecifier) {
							result = result.concat(ds.getRawSignature());
							result = result.concat(" ");
						}
						result = result.concat(varName);
						result = result.concat(";\n"); // TODO: assign some default values (?)
						var functionToReplace = transformedCode.split("[)]").first();
						result = result.concat(functionToReplace + ") in " + simpleDecl.getRawSignature() + " with Arduino lib function");
						return result;
					}
				}
			}
		}
	}
	
	// TODO: handle expressions w/n conditions of if/for/while loops
	
	if(ast.isInstanceOf("CASTIfStatement")) {
		var exp = ast.getConditionExpression(); // TODO: handle the case where this relies on platform dep. function
		var thenClause = ast.getThenClause();
		var elseClause = ast.getElseClause();
		if(elseClause <> null) {
			if(elseClause.isInstanceOf("CASTIfStatement")) {
				return "if(" + exp.getRawSignature() + ") {\n" + transformCode(thenClause) 
					+ "} else " + transformCode(elseClause);
			} else {
				return "if(" + exp.getRawSignature() + ") {\n" + transformCode(thenClause) 
					+ "} else {\n" + transformCode(elseClause) + "}";
			}	
		}
		return "if(" + exp.getRawSignature() + ") {\n" + transformCode(thenClause) + "\n}";
	}
	
	if(ast.isInstanceOf("CASTForStatement")) {
		var body = transformCode(ast.getBody());
		var initStmt = ast.getInitializerStatement().getRawSignature().split(";").first(); // TODO: handle where these exp/stmt rely on platform dep. functions
		var condStmt = ast.getConditionExpression().getRawSignature().split(";").first();
		var iterStmt = ast.getIterationExpression().getRawSignature().split(";").first();
		
		return "for(" + initStmt + "; " + condStmt + "; " + iterStmt + ") {\n" + body + "}";
	}
	
	if(ast.isInstanceOf("CASTWhileStatement")) {
		var body = transformCode(ast.getBody());
		var cond = ast.getCondition().getRawSignature(); // TODO: handle when this relies on platform dep functions
		
		return "while(" + cond + ") {\n" + body + "}";
	}
	
	if(ast.isInstanceOf("CASTExpressionStatement") or ast.isInstanceOf("CASTTranslationUnit") or ast.isInstanceOf("CASTCompoundStatement") or ast.isInstanceOf("CASTFunctionDefinition")) {
		return transformCode(ast.getChildren());
	}
	
	if(ast.isPartOfSourceFile()) {	// TODO: might not be necessary if we check for this elsewhere when generating code
		return ast.getRawSignature();
	}

	return "";
}


operation getSetupCode(ast : Any) : Sequence<Any> { // TODO: check that order is preserved
	var main = getMainMethodCompoundStatement(ast);
	return main.getChildren().reject(c | c.isWhileTrueLoop());
}

operation getLoopCode(ast : Any) : Sequence<Any> {
	var main = getMainMethodCompoundStatement(ast);
	return main.getChildren().selectOne(c | c.isWhileTrueLoop()).getChildren().selectOne(c | c.isInstanceOf("CASTCompoundStatement")).getChildren();
}

operation Any isWhileTrueLoop() : Boolean {
	if(self.isInstanceOf("CASTWhileStatement")) {
		var expr = self.getChildren().select(c | c.isInstanceOf("CASTLiteralExpression"));
		if(expr.size() == 1) {
			var val = expr.first().toString();
			if(val == "1" or val == "true") {
				return true;
			}
		}
	}
	return false;
}

operation getMainMethodCompoundStatement(ast : Any) : Any {
	var functionDefs = ast.getChildren().select(c | c.isPartOfSourceFile()).select(c | c.isInstanceOf("CASTFunctionDefinition"));
	for(f in functionDefs) {
		var decl = f.getChildren().selectOne(c | c.isInstanceOf("CASTFunctionDeclarator"));
		if(decl.getName().toString() == "main") {
			return f.getChildren().selectOne(c | c.isInstanceOf("CASTCompoundStatement"));
		}
	}
	return null;
}

operation String isPlatformDependentFunc(allDecl : Sequence<Any>, libPath : String) : Boolean {
	// TODO: need to handle scope: collect all occurrences of func in allDecl and choose based on matching sig/scope
	for(d in allDecl) {
		var declarators = d.getDeclarators();
		if(declarators.size() > 0) {
			if(declarators.first().getName().toString() == self) {
				var file = declarators.first().getContainingFilename();
				if(file.startsWith(libPath)) {
					return true;
				} else {
					return false;
				}
			}
		}
	}
	
	return false;
}

// TODO: better way to check type of element
operation Any isInstanceOf(class : String) {
	var pkg = "org.eclipse.cdt.internal.core.dom.parser.c.";
	return self.getClass().toString().split(" ").second() == pkg.concat(class);
}

// TODO: better way to just get field value?
operation Any getStaticIntField(fieldName : String) : Integer{
		var fields = self.getClass().getFields();
		for(field in fields) {
			if(field.getName() == fieldName) {
				return field.getInt(self);
			}
		}
		return -1;
}