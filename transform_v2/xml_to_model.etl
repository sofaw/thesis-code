pre {
  "Starting Transformation".println();
  
  delete OUT!Circuit.all; // Solve issues with successive transformations
  delete OUT!Connector.all;
  delete OUT!Part.all;
  
  var constructedPartIds : Sequence;
  var arduinoTitle = "Arduino Uno (Rev3)";
  
  var outputParts : Set<String>;
  outputParts.add("led"); // Regular LED; RGB LED; Superflux LED;
  // TODO: handle IC LED_Driver and intel edison
  outputParts.add("prolight rgb 3 watt star");
  outputParts.add("7 segment display");
  outputParts.add("dot matrix");
  outputParts.add("lcd"); // Graphic LCD; LCD screen;
  outputParts.add("speaker"); // Piezo speaker; Loudspeaker;
  outputParts.add("microphone");
  outputParts.add("motor"); // DC Motor; Stepper Motor; Motor driver;
  outputParts.add("edgy");
  outputParts.add("servo");
  outputParts.add("solenoid");
  outputParts.add("relay"); // Relay; DIP Relay;
  outputParts.add("peltier element");
  
  var inputParts : Set<String>;
  inputParts.add("potentiometer"); // Digital potentiometer; Slide potentiometer; Rotary potentiometer; Trimmer potentiometer;
  inputParts.add("sensor"); // Humidity and temp sensor; Barometric pressure sensor; Temp. sensor; Infrared proximity sensor;
  inputParts.add("rfid reader");
  inputParts.add("antenna");
  inputParts.add("switch"); // Reed switch; Tilt switch; Mini toggle switch; Toggle switch;
  inputParts.add("lsm303c");
  inputParts.add("accelerometer");
  inputParts.add("photocell");
  inputParts.add("basic flex resistor"); // Need to differentiate between regular resistor
  inputParts.add("basic force sensing resistor"); // ""
  inputParts.add("pushbutton"); // (There are two pushbuttons)
  inputParts.add("rotary encoder"); // Hexa rotary encoder; Rotary encoder;
  inputParts.add("variable capacitor");
  inputParts.add("tsop312"); // Not core part but required for case study
  
  var boards : Set<String>;
  boards.add("arduino uno");
  boards.add("arduino yun");
  boards.add("ichigojam");
  boards.add("udoo board");
  boards.add("bare conductive touch board");
  boards.add("dquidio board");
  boards.add("adafruit atmega32u4");
  boards.add("96boards consumer");
  boards.add("gogoboard");
  boards.add("mbili");
  boards.add("chipkit wf32");
  boards.add("raspberry pi"); // Three; Zero;
  boards.add("wiring"); // Wiring; Wiring USB Adapter;
  boards.add("linino");
  boards.add("stepoko");
  boards.add("microcontroller");
  boards.add("picaxe-08");
  boards.add("parallax propeller");
  boards.add("basic stamp 2");
  boards.add("mbed");
  boards.add("raspio duino");
  boards.add("blueiot core");
  boards.add("teensy");
  boards.add("pinocc.io scout");
  boards.add("lightblue bean");
  boards.add("msp430g2");
  boards.add("galileo");
  boards.add("netduino");
  boards.add("spark core");
  // TODO: need to check these do not appear in any other part names;
}

rule xmlPart2Board
  transform x : XML!t_part
  to p : OUT!Part {
  
  guard { 
    if(not constructedPartIds.exists(id | id == x.a_id)) { // Prevent duplicates
      constructedPartIds.add(x.a_id);
      return true;
    }
    return false;
  } 
  
  p.type = x.a_title.getPartType();

  p.partId = x.a_id;
  p.title = x.a_title;
}
  
rule xmlNet2ModelConnectors
  transform x : XML!t_net
  to c : OUT!Connector {
  
  guard : x.children.flatten.size > 1 // Ignore empty pins
  
  var connectors = x.children;
  
  var i = 0;
  while (i < (connectors.size - 1)) {
    createConnectors(i, c, connectors);
    i = i + 1;    
  }
  
}

/*rule netlist2Circuit
  transform x : XML!t_netlist
  to c : OUT!Circuit {
  
  c.parts.addAll(OUT!Part.all);
  
}*/

operation createConnectors(i : Integer, c : OUT!Connector, connectors : Sequence<XML!Connector>) {
  var con1 = connectors.get(i);
  var con2 = connectors.get(i+1);
    
  var conOut1;
  if(i == 0) {
    conOut1 = c;
  } else {
    conOut1 = new OUT!Connector;
  }
  var conOut2 = new OUT!Connector;
  
  conOut1.name = con1.a_name;
  conOut2.name = con2.a_name;
  conOut1.connectedTo = conOut2;
  conOut2.connectedTo = conOut1;
  
  var part1 = getPartById(con1.children.first.a_id);
  part1.connectors.add(conOut1);
  var part2 = getPartById(con2.children.first.a_id);
  part2.connectors.add(conOut2);
}

operation getPartById(id : String) : OUT!Part {
  var allParts = OUT!Part.all;
  return allParts.selectOne(p | p.partId == id);
}

operation String getPartType() : Any { // Use Any because of https://bugs.eclipse.org/bugs/show_bug.cgi?id=286412  
  if(self.checkContainsOneOfSet(boards)) {
    return OUT!Type#Board;
  }
  
  if(self.checkContainsOneOfSet(inputParts)) {
   return OUT!Type#Input;
  }
  
  if(self.checkContainsOneOfSet(outputParts)) {
   return OUT!Type#Output;
  }
  
  return OUT!Type#Other;
}

operation String checkContainsOneOfSet(strings : Set<String>) : Boolean {
  for(str in strings) {
    if(str.isSubstringOf(self.toLowerCase())) {
      return true; 
    }
  }
  return false;
}

post {
  // Put parts under a root Circuit element
  var circuit : new OUT!Circuit;  
  circuit.parts.addAll(OUT!Part.all);
  
  "Transformation Finished".println();
}